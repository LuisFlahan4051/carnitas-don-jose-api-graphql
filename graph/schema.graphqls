# GraphQL schema example
#
# https://gqlgen.com/getting-started/
# go run github.com/99designs/gqlgen generate

type User {
  id: ID!
  name: String
  lastName: String
  username: String
  password: String
  admin: Boolean
  root: Boolean
  verified: Boolean
  reported: Boolean
  reportReason: String
  activeContract: Boolean
  admissionDay: String
  unemploymentDay: String
  workedHours:Int
  currentBranch: String
  originBranch: String
  
  monetaryBonds: Float
  monetaryDiscounts: Float

  mail: String
  alternativeMails: [String]
  phone: String
  alternativePhones: [String]
  address: String
  bornDay: String
  degreeStudy: String
  relationShip: String
  curp: String
  citizenId: String
  credentialId: String
  originState: String
  
  score: String
  qualities: String
  defects: String

  darktheme: Boolean 
}

type Query {
  users: [User]
  userByUsername(username: String): User
  userById(id: ID): User
  validateUser(
    username: String
    password: String
  ): Boolean
}

input NewUser {
  id: ID!
  name: String
  lastName: String
  username: String!
  password: String!
  admin: Boolean
  root: Boolean
  verified: Boolean
  reported: Boolean
  reportReason: String
  activeContract: Boolean
  admissionDay: String
  unemploymentDay: String
  workedHours:Int
  currentBranch: String
  originBranch: String
  
  monetaryBonds: Float
  monetaryDiscounts: Float

  mail: String
  alternativeMails: [String]
  phone: String
  alternativePhones: [String]
  address: String
  bornDay: String
  degreeStudy: String
  relationShip: String
  curp: String
  citizenId: String
  credentialId: String
  originState: String
  
  score: String
  qualities: String
  defects: String

  darktheme: Boolean 
}

input updateUser{
  id: ID!
  name: String
  lastName: String
  username: String!
  password: String!
  admin: Boolean
  root: Boolean
  verified: Boolean
  reported: Boolean
  reportReason: String
  activeContract: Boolean
  admissionDay: String
  unemploymentDay: String
  workedHours:Int
  currentBranch: String
  originBranch: String
  
  monetaryBonds: Float
  monetaryDiscounts: Float

  mail: String
  alternativeMails: [String]
  phone: String
  alternativePhones: [String]
  address: String
  bornDay: String
  degreeStudy: String
  relationShip: String
  curp: String
  citizenId: String
  credentialId: String
  originState: String
  
  score: String
  qualities: String
  defects: String

  darktheme: Boolean 
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUser(input: updateUser!): User!
  delateUser(input: updateUser!): User!
}

# ------------------------------------------------------------------------------
# mutation{createUser(input:{
#   id: "1LuisFlahan240201",
#   name: "Luis Fernando", 
#   lastName: "Melendez Bustamante", 
#   username: "LuisFlahan", 
#   password: "4051",
#   root: true,
#   admin: true,
#   activeContract: true
# }){
#     id
#     name
#     lastName
#     username
#     password
#     root
#     admin
#     activeContract
#   }
# }

# mutation{
#   createUser(input:{
#     id: "3Kriss121281",
#     name: "Cristina de Guadalupe",
#     lastName: "Bustamante Enriquez",
#     username: "Kriss"
#     password: "123"
#     root: false,
#     admin: true,
#     activeContract: false
#   }){
#     id
#     name
#     lastName
#     username
#     password
#     root
#     admin
#     activeContract
#   }
# }

# query {
#   users{
#     id
#     name
#     lastName
#     username
#     password
#   }
# }

# query { 
#   userByUsername(username: "LuisFlahan"){
#     id
#     name
#     lastName
#     username
#     password
#   }
# }

# mutation{
#   delateUser(input:{id: "1LuisFlahan24020100", username:"LuisFlahan", password:"4051"}){
#     id
#     username
#     password
#   }
# }